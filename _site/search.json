[
  {
    "objectID": "why-git.html",
    "href": "why-git.html",
    "title": "What is Git/Github and why to use it as a researcher",
    "section": "",
    "text": "Git is a version control system. Think of it as a tool that tracks every change you make to your files. It creates a complete history of your project, allowing you to easily revert to previous versions, compare changes, and work on different features without affecting the main code. It operates locally on your computer.\nGitHub is a cloud-based service that hosts Git repositories. It‚Äôs like a social network for code. It provides a central place to store your project online, enabling you to share your work, collaborate with others, and have an off-site backup. While Git is the engine, GitHub is the platform that hosts the work and provides tools for collaboration."
  },
  {
    "objectID": "why-git.html#what-are-git-and-github",
    "href": "why-git.html#what-are-git-and-github",
    "title": "What is Git/Github and why to use it as a researcher",
    "section": "",
    "text": "Git is a version control system. Think of it as a tool that tracks every change you make to your files. It creates a complete history of your project, allowing you to easily revert to previous versions, compare changes, and work on different features without affecting the main code. It operates locally on your computer.\nGitHub is a cloud-based service that hosts Git repositories. It‚Äôs like a social network for code. It provides a central place to store your project online, enabling you to share your work, collaborate with others, and have an off-site backup. While Git is the engine, GitHub is the platform that hosts the work and provides tools for collaboration."
  },
  {
    "objectID": "why-git.html#why-an-academic-researcher-needs-it",
    "href": "why-git.html#why-an-academic-researcher-needs-it",
    "title": "What is Git/Github and why to use it as a researcher",
    "section": "Why an Academic Researcher Needs It üî¨",
    "text": "Why an Academic Researcher Needs It üî¨\nEven if you‚Äôre not a data analyst, Git and GitHub are invaluable for several reasons:\n\nReproducible Research: By tracking every change to your analysis scripts, you create a transparent and verifiable history. A reviewer, collaborator, or even your future self can see exactly how a figure or result was generated from the raw data. This is a core tenet of modern science.\nBackup and Disaster Recovery: Your research code is a valuable asset. If your computer fails, your entire project is safe and sound on GitHub. It‚Äôs a free, off-site backup.\nCollaboration with Students: As a principal investigator, you can use GitHub to work on projects with your students. You can review their code, suggest changes, and merge their contributions into the main project. You can see who made which changes and when, which helps with accountability and streamlines the collaboration process.\nAccess Anywhere: You can access your code from any computer with an internet connection. This is great for working from a lab, office, or home without needing to use a flash drive."
  },
  {
    "objectID": "why-git.html#a-simple-github-workflow-for-rstudio",
    "href": "why-git.html#a-simple-github-workflow-for-rstudio",
    "title": "What is Git/Github and why to use it as a researcher",
    "section": "A Simple GitHub Workflow for RStudio",
    "text": "A Simple GitHub Workflow for RStudio\nThis diagram illustrates a basic workflow for a single user using Git and GitHub for an R project in RStudio.\n\n\n\n\n\ngraph TD\n    A[Local Computer]\n    B[RStudio Project]\n    C{Git & Version Control}\n    D[Stage Changes]\n    E[Commit Changes]\n    F[Push to GitHub]\n    G[GitHub Repository]\n\n    subgraph Local Computer\n        B\n        C\n        D\n        E\n        F\n    end\n\n    subgraph The Cloud\n        G\n    end\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    E --&gt; F\n    F --&gt; G\n    G --&gt; B\n\n    A --&gt; B % 1. Start/Update %\n    B --&gt; C % 2. Edit Code %\n    C --&gt; D % 3. Save & Stage %\n    D --&gt; E % 4. Commit %\n    E --&gt; F % 5. Upload to Cloud %\n    F --&gt; G % 6. Sync with GitHub %\n    G --&gt; B % 7. Pull Changes %\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style G fill:#f9f,stroke:#333,stroke-width:2px\n    classDef commitbox fill:#bbf,stroke:#333,stroke-width:2px,color:#fff\n    class D,E,F commitbox\n    linkStyle 0,1,2,3,4,5,6 stroke:#333,stroke-width:2px"
  },
  {
    "objectID": "setup-githubdesktop.html",
    "href": "setup-githubdesktop.html",
    "title": "Minimal Setup with Github Desktop",
    "section": "",
    "text": "Getting started with GitHub Desktop is a straightforward process.\n\nDownload the Application: Go to the official GitHub Desktop website and download the installer for your operating system (Windows or macOS).\nInstall and Launch: Run the installer and follow the on-screen prompts. Once installed, launch the application.\nSign In: You‚Äôll be prompted to sign in to your GitHub.com account. This is a crucial step that connects the application to your online repositories. If you don‚Äôt have an account, you‚Äôll need to create one first on the GitHub website."
  },
  {
    "objectID": "setup-githubdesktop.html#installing-and-setting-up-github-desktop",
    "href": "setup-githubdesktop.html#installing-and-setting-up-github-desktop",
    "title": "Minimal Setup with Github Desktop",
    "section": "",
    "text": "Getting started with GitHub Desktop is a straightforward process.\n\nDownload the Application: Go to the official GitHub Desktop website and download the installer for your operating system (Windows or macOS).\nInstall and Launch: Run the installer and follow the on-screen prompts. Once installed, launch the application.\nSign In: You‚Äôll be prompted to sign in to your GitHub.com account. This is a crucial step that connects the application to your online repositories. If you don‚Äôt have an account, you‚Äôll need to create one first on the GitHub website."
  },
  {
    "objectID": "setup-githubdesktop.html#using-github-desktop-with-a-new-rstudio-project",
    "href": "setup-githubdesktop.html#using-github-desktop-with-a-new-rstudio-project",
    "title": "Minimal Setup with Github Desktop",
    "section": "2. Using GitHub Desktop with a New RStudio Project",
    "text": "2. Using GitHub Desktop with a New RStudio Project\nThis is the easiest way to start a new project. You‚Äôll create the repository on GitHub and then clone it to your computer.\n\nCreate a New Repository: In GitHub Desktop, click File &gt; New Repository‚Ä¶.\nName Your Project: Give your new repository a clear and descriptive name (e.g., my-first-r-project). Check the box to ‚ÄúInitialize this repository with a README.‚Äù\nClone to Your Local Machine: Click Create Repository. GitHub Desktop will automatically publish it to your GitHub account and then clone it to a folder on your computer. You‚Äôll see the folder path right on the main screen of the application.\nCreate RStudio Project: In RStudio, go to File &gt; New Project‚Ä¶. Select Existing Directory and navigate to the folder that GitHub Desktop just created for you. Click Create Project.\nInitial Commit: RStudio will now be linked to your Git repository. You‚Äôll notice a Git tab in the top-right pane. Back in GitHub Desktop, you‚Äôll see that a new .Rproj file has been added. Write a short commit message like ‚ÄúAdd RStudio project file‚Äù and click Commit to main.\nPush to GitHub: Click the Push origin button to upload these changes to your online GitHub repository."
  },
  {
    "objectID": "setup-githubdesktop.html#connecting-an-existing-rstudio-project",
    "href": "setup-githubdesktop.html#connecting-an-existing-rstudio-project",
    "title": "Minimal Setup with Github Desktop",
    "section": "3. Connecting an Existing RStudio Project",
    "text": "3. Connecting an Existing RStudio Project\nIf you‚Äôve already started working on a project in RStudio and want to add it to GitHub, here‚Äôs the workflow.\n\nAdd a Local Repository: In GitHub Desktop, click File &gt; Add Local Repository‚Ä¶.\nNavigate to Your Project: Select the folder that contains your RStudio project.\nPublish Your Repository: Once added, you‚Äôll see a blue button that says Publish repository. Click it.\nName and Publish: A window will pop up to let you name the new repository on GitHub. Once you‚Äôve chosen a name, click Publish Repository.\nInitial Commit: All of your project‚Äôs existing files are now ready to be committed. Write an initial commit message like ‚ÄúInitial project files‚Äù and click Commit to main.\nPush to GitHub: Click the Push origin button to upload your project to GitHub."
  },
  {
    "objectID": "setup-githubdesktop.html#your-daily-workflow-commit-push",
    "href": "setup-githubdesktop.html#your-daily-workflow-commit-push",
    "title": "Minimal Setup with Github Desktop",
    "section": "4. Your Daily Workflow: Commit & Push",
    "text": "4. Your Daily Workflow: Commit & Push\nThis is the simple, repetitive process you‚Äôll use every day.\n\nMake Changes: Work on your code or documents within RStudio as you normally would.\nOpen GitHub Desktop: After saving your files, switch to the GitHub Desktop application.\nReview and Stage: GitHub Desktop will automatically show you all the changes you‚Äôve made. You can review and select the files you want to include in your commit.\nWrite a Commit Message: In the bottom-left of the application, write a short, descriptive commit summary. For example, ‚ÄúAdd data cleaning script‚Äù or ‚ÄúFix bug in plot function‚Äù. A good commit message explains what you changed and why.\nCommit and Push: Click the Commit to main button. This saves the changes to your local Git history. Then, click Push origin to send those changes to your online GitHub repository."
  },
  {
    "objectID": "setup-githubdesktop.html#collaborating-with-a-student",
    "href": "setup-githubdesktop.html#collaborating-with-a-student",
    "title": "Minimal Setup with Github Desktop",
    "section": "5. Collaborating with a Student",
    "text": "5. Collaborating with a Student\nTo allow a student to collaborate on your repository, you first need to invite them to the project on GitHub.com.\n\nInvite Collaborator: On the GitHub website, navigate to your repository. Click on the Settings tab, then Collaborators and teams. From there, you can invite your student using their GitHub username or email address.\nStudent Accepts Invitation: The student will receive an invitation email. They must accept the invitation to gain access.\nStudent Clones the Repository: The student should open GitHub Desktop and go to File &gt; Clone Repository‚Ä¶. They will see your project in the list of their repositories and can select it to clone it to their own computer.\nStudent‚Äôs Workflow: The student‚Äôs workflow is similar to your daily one, but with one key difference: they should Pull before they start working. This ensures they have the latest version of the code. The complete cycle for them is:\n\nPull any new changes from the main repository.\nMake changes in RStudio.\nCommit their changes with a descriptive message.\nPush their committed changes to the main repository."
  },
  {
    "objectID": "setup-githubdesktop.html#working-with-branches-a-best-practice",
    "href": "setup-githubdesktop.html#working-with-branches-a-best-practice",
    "title": "Minimal Setup with Github Desktop",
    "section": "6. Working with Branches (A Best Practice)",
    "text": "6. Working with Branches (A Best Practice)\nWorking directly on the main branch can be risky, especially in a collaborative project. A branch is a separate version of your project that allows you to work on new features or bug fixes without affecting the main code.\n\nCreate a New Branch: In GitHub Desktop, at the top of the application, click on the Current Branch dropdown menu and select New Branch‚Ä¶. Give your branch a descriptive name (e.g., add-new-data, fix-plot-bug).\nSwitch to Your New Branch: The application will automatically switch you to this new branch.\nMake and Commit Changes: Make all of your changes and commits on this new branch. This keeps them separate from the main branch.\nPublish the Branch: The first time you commit to a new branch, you‚Äôll need to Publish branch to make it available on GitHub.com.\nCreate a Pull Request: Once you are done with your work, go to the GitHub website. You will see a prompt to create a Pull Request. A Pull Request is a request to merge your changes from your new branch into the main branch. This is the perfect time to ask your collaborator for a review or to check for any conflicts before merging.\nMerge into Main: When your work is ready and reviewed, you can merge your branch into main. In the Pull Request on GitHub.com, click the Merge pull request button. The changes are now safely integrated into your main project.\nClean Up: Once merged, you can delete your branch from both GitHub.com and GitHub Desktop to keep your project clean.\n\n\n6.1 Collaboration Best Practices on Branches\nFor a smooth collaborative workflow, it‚Äôs essential that everyone follows a few best practices.\n\nStart with the Latest Code: Before a student begins any new work, they should always Fetch origin and Pull origin on their main branch to make sure their local version is up-to-date with the shared repository.\nBranch for Every Task: Encourage your student to create a new, separate branch for every new feature, bug fix, or major change they work on. This keeps their changes isolated and makes it easy to review and merge their work without disrupting the rest of the project.\nUse Pull Requests for Feedback: The Pull Request is the central tool for code review. As a tutor, you can review the student‚Äôs code, add comments on specific lines, and suggest improvements directly in the Pull Request on GitHub.com.\nResolve Conflicts Locally: Sometimes, you or your student might be working on the same file at the same time, leading to a merge conflict. GitHub Desktop will alert you when this happens. You should always try to resolve these conflicts locally on your computer before attempting to merge.\n\n\n\nIf you have Github Desktop installed, you don‚Äôt need to install the standalone Git version if you start working with Git from RStudio"
  },
  {
    "objectID": "setup-complete.html",
    "href": "setup-complete.html",
    "title": "Complete Setup",
    "section": "",
    "text": "This is the recommended setup for getting the most out of the workshop and for your future projects. It includes RStudio, Git, and GitHub integration."
  },
  {
    "objectID": "setup-complete.html#requirements",
    "href": "setup-complete.html#requirements",
    "title": "Complete Setup",
    "section": "Requirements:",
    "text": "Requirements:\n\nRStudio Desktop:\n\nEnsure RStudio is installed: posit.co/download/rstudio-desktop/\n\nGit Installation: Git is essential for version control and collaborating with others via GitHub.\nIf you already have Github Desktop installed, you don‚Äôt need to install the standalone Git version for the following steps. However, Github Desktop needs to stay on your computer to keep that functionality. If you uninstall Github Desktop, you need to install Git Standalone separately, as follows.\nFirst, check if you already have Git installed: How to Check for Git Installation\nIf you DO NOT have Git installed:\n\nFor Windows (PC): Follow these detailed instructions: Git Installation on Windows\nFor macOS: Follow these detailed instructions: Git Installation on macOS\n\nIf you DO have Git installed: Great! You‚Äôre all set for the Git part of this setup.\nConfigure Git (First-Time Setup): After installing Git, tell it who you are by running these commands in your RStudio Terminal: bash      git config --global user.name \"Your Name\"      git config --global user.email \"your.email@example.com\"\nGitHub Account: GitHub is a web-based hosting service for Git repositories. We‚Äôll use it for sharing code and potentially collaborating.\n\nIf you don‚Äôt have a GitHub account, please create one here: github.com/join\nRemember your username and password.\n\nConnect RStudio to GitHub (Personal Access Token - PAT): This is the most secure way to connect RStudio/Git to GitHub without repeatedly typing your password.\n\nGenerate a PAT on GitHub:\n\nGo to your GitHub profile settings: github.com/settings/tokens\nClick Generate new token (or Generate new token (classic) if you don‚Äôt see the new one).\nGive it a descriptive Note (e.g., ‚ÄúRStudio PAT‚Äù).\nSet an Expiration (e.g., 30 days, 90 days, or a custom date after the workshop).\nUnder Select scopes, check at least repo (full control of private repositories) and potentially workflow if you plan to use GitHub Actions.\nClick Generate token.\nIMPORTANT: Copy the generated token immediately! You won‚Äôt see it again. Store it securely (e.g., in a password manager).\n\nStore PAT in RStudio/Git: When you try to interact with GitHub from RStudio for the first time (e.g., by creating a new RStudio project from a GitHub repository, or pushing changes), Git will prompt you for your username and password/PAT.\n\nEnter your GitHub username.\nWhen prompted for password, paste the PAT you just generated.\nGit Credential Manager Core (Windows) or macOS Keychain Access will often securely store this for future use, so you don‚Äôt have to enter it every time."
  },
  {
    "objectID": "setup-complete.html#rstudio-github-workflow-project-setup-collaboration",
    "href": "setup-complete.html#rstudio-github-workflow-project-setup-collaboration",
    "title": "Complete Setup",
    "section": "6. RStudio-GitHub Workflow: Project Setup & Collaboration",
    "text": "6. RStudio-GitHub Workflow: Project Setup & Collaboration\n\nStep 1: Create a Project and Add Git\nThis is the first step to linking your work to Git.\n\nFor a NEW Project: Go to the RStudio menu bar and select File &gt; New Project‚Ä¶. In the pop-up window, choose New Directory, and make sure to check the box for ‚ÄúCreate a Git repository.‚Äù Give your project a name and click ‚ÄúCreate Project.‚Äù This automatically initializes a Git repository in your new project folder.\nFor an EXISTING Project: Go to File &gt; New Project‚Ä¶, then select Existing Directory. Navigate to your project folder. Click ‚ÄúCreate Project.‚Äù To add Git, go to the RStudio menu bar and select Tools &gt; Project Options‚Ä¶. In the pop-up window, go to the Git/SVN tab. Next to ‚ÄúVersion control system,‚Äù choose Git from the dropdown menu and click ‚ÄúOK.‚Äù RStudio will prompt you to restart. After restarting, a new Git pane will appear in the top-right of the RStudio window.\n\n\n\nStep 2: Make Your First Commit\nThis is how you save a snapshot of your project‚Äôs history.\n\nMake Changes: Create a new script, save a data file, or make any other changes to your project.\nOpen the Git Pane: In the top-right pane of RStudio, you‚Äôll see a tab named Git. Click on it.\nReview and Stage: The Git pane shows you a list of all the files that have changed.\n\nThe ‚ÄúStatus‚Äù column indicates if a file is new (?), modified (M), or deleted (D).\nTo prepare a file for your commit, click the checkbox next to its name under the ‚ÄúStaged‚Äù column. This action is called staging‚Äîyou‚Äôre telling Git which specific changes you want to include in this snapshot.\n\nCommit the Changes: Click the Commit button at the top of the Git pane. This opens a new window called ‚ÄúReview Changes.‚Äù\n\nOn the left, you can see the files you‚Äôve staged.\nOn the bottom right, there‚Äôs a box for a Commit message. This is a brief, descriptive note that explains what you changed and why. A good message is like a helpful hint for your future self (or a collaborator).\nClick the Commit button in the pop-up window. This creates a local snapshot of your staged files. The changes are now saved to your computer‚Äôs Git history.\n\n\n\n\nStep 3: Link to a GitHub Repository (Your Remote)\nNow that you have a local Git repository, you need to connect it to an online repository on GitHub.\n\nCreate a Repository on GitHub: Go to the GitHub website and click the green New button. Give your repository a name, and be sure to leave the checkboxes for initializing with a README, .gitignore, and license unchecked. Click ‚ÄúCreate repository.‚Äù You will be taken to a page with a series of instructions. Copy the HTTPS URL (it will look something like https://github.com/your-username/your-repo.git).\nAdd a Remote in RStudio: Back in RStudio, go to the Git pane. Click the blue Push button (the up arrow). Since this is the first time you‚Äôre pushing, RStudio will prompt you to set a ‚ÄúRemote URL.‚Äù Paste the HTTPS URL you just copied from GitHub and click ‚ÄúOK.‚Äù This establishes the connection between your local project and the online GitHub repository.\n\n\n\nStep 4: Push to GitHub\nOnce you‚Äôve made a commit, you need to push it to share it with the world.\n\nThe Push Action: The Push button (the up arrow in the Git pane) sends the commits you‚Äôve made on your computer to the remote repository on GitHub.\nPushing for the First Time: The first time you push, a window will pop up asking for your GitHub username and password/PAT. Enter your username and paste your PAT, as you set up in the earlier step. Your commits will now be uploaded to GitHub.\nThe Push-Pull Cycle: From now on, your workflow will be a simple ‚Äúpush-pull‚Äù cycle. After you commit, you push to share your changes.\n\n\n\nStep 5: Working on a Branch (Best Practices)\nTo avoid problems in collaborative projects, you should always work on a separate branch.\n\nCreate a New Branch: In the RStudio Git pane, click the dropdown menu with the branch name (it will likely say ‚Äúmain‚Äù). From the menu, select New Branch‚Ä¶. Give your branch a descriptive name (e.g., feature-plots or bug-fix). Click ‚ÄúOK.‚Äù RStudio will automatically switch you to this new branch.\nMake and Commit Changes: Make all your changes and commits on this branch, just as you did on the main branch. Your commits are now isolated from the main project code.\nPush the Branch: Click the Push button to send your new branch and its commits to GitHub. Since this is a new branch, you may need to confirm the ‚ÄúUpstream branch‚Äù setting, but RStudio usually handles this automatically.\nCreate a Pull Request: Go to your repository on the GitHub website. GitHub will usually show a banner at the top prompting you to create a Pull Request for your newly pushed branch. A Pull Request is how you propose that the changes on your branch be merged into the main branch. This is also where you can ask a collaborator to review your work.\nMerge and Cleanup: Once the Pull Request is approved, you can click the Merge pull request button on GitHub to safely integrate your changes. After the merge is complete, you can click the Delete branch button on GitHub to keep your repository tidy.\n\nThis process keeps your main project code safe and allows for a smooth, collaborative workflow.\n\n\nWorking with a Collaborator on a Branch\nWorking with a collaborator on a branch is a highly recommended practice for keeping your main branch clean and stable. Here‚Äôs a typical workflow:\n\nBoth Collaborators Create a Branch: Each person creates their own branch from the main branch (e.g., you create your-branch and your collaborator creates collaborator-branch).\nWork and Commit Locally: You both work independently on your branches, making changes and committing them as you go.\nThe ‚ÄúPull Before Push‚Äù Rule: Before you Push your changes to GitHub, it is best practice to always Pull first. This fetches any new changes from the remote repository that your collaborator might have pushed. Click the Pull button (the down arrow) in the Git pane. This helps prevent merge conflicts.\nPush Your Changes: After you pull, and after you are confident that your local branch is up-to-date with your collaborator‚Äôs work, you can Push your commits to GitHub. Your collaborator will do the same from their machine.\nThe Pull Request and Code Review: When you are ready to merge your work, you open a Pull Request on GitHub. The Pull Request shows the changes you‚Äôve made and allows your collaborator (or team) to review the code, suggest changes, or ask questions. This is a crucial step for collaboration, as it ensures quality and prevents bugs from being introduced to the main branch.\nMerging: Once the Pull Request is approved, you can merge your branch into main. Then, you can delete your branch on GitHub, and your collaborator will need to Pull from main to get your new changes.\n\nThis approach ensures that all work is reviewed and tested before being integrated, making for a much more robust and manageable project."
  },
  {
    "objectID": "git-installation-windows.html",
    "href": "git-installation-windows.html",
    "title": "Git Installation on Windows",
    "section": "",
    "text": "This guide walks you through installing Git on your Windows PC for use with RStudio and GitHub.\n\nDownload the Installer\n\nVisit the official Git website: https://git-scm.com/downloads.\nClick the ‚ÄúWindows‚Äù link to download the latest stable .exe installer.\n\nRun the Installer\n\nLocate the downloaded .exe file (e.g., Git-2.xx.x-64-bit.exe) and double-click to start the installation wizard.\n\nFollow the Installation Wizard Prompts\n\nLicense: Click Next.\nSelect Components: Accept defaults, ensuring ‚ÄúGit Bash Here‚Äù and ‚ÄúGit GUI Here‚Äù are checked. Click Next.\nInstallation Location: Use the default location unless needed otherwise. Click Next.\nStart Menu Folder: Accept the default. Click Next.\nAdjust PATH Environment: Critical for RStudio. Select:\n\n‚ÄúGit from the command line and also from 3rd-party software‚Äù\nClick Next.\n\nDefault Branch Name: Use main for new repositories. Click Next.\nHTTPS Backend: Choose ‚ÄúUse the OpenSSL library‚Äù (recommended). Click Next.\nLine Ending Conversions: Select ‚ÄúCheckout Windows-style, commit Unix-style line endings‚Äù for cross-platform compatibility. Click Next.\nTerminal Emulator: Choose ‚ÄúUse MinTTY (default Git for Windows terminal)‚Äù. Click Next.\nDefault git pull Behavior: Select ‚ÄúDefault (fast-forward or merge)‚Äù. Click Next.\nCredential Helper: Choose ‚ÄúGit Credential Manager Core‚Äù. Click Next.\nExtra Options: Accept defaults. Click Next.\nExperimental Options: Uncheck unless needed. Click Install.\n\nFinish Installation\n\nClick Finish when complete. Uncheck ‚ÄúView Release Notes‚Äù if desired.\n\nVerify Installation in RStudio\n\nImportant: Close and reopen RStudio (or its terminal pane) to update the PATH environment variable.\nOpen a new terminal in RStudio: Tools &gt; Terminal &gt; New Terminal.\nType git --version and press Enter. You should see the Git version (e.g., git version 2.45.2.windows.1).\nIf an error occurs, restart your computer and retry git --version."
  },
  {
    "objectID": "git-installation-windows.html#installing-git-on-windows",
    "href": "git-installation-windows.html#installing-git-on-windows",
    "title": "Git Installation on Windows",
    "section": "",
    "text": "This guide walks you through installing Git on your Windows PC for use with RStudio and GitHub.\n\nDownload the Installer\n\nVisit the official Git website: https://git-scm.com/downloads.\nClick the ‚ÄúWindows‚Äù link to download the latest stable .exe installer.\n\nRun the Installer\n\nLocate the downloaded .exe file (e.g., Git-2.xx.x-64-bit.exe) and double-click to start the installation wizard.\n\nFollow the Installation Wizard Prompts\n\nLicense: Click Next.\nSelect Components: Accept defaults, ensuring ‚ÄúGit Bash Here‚Äù and ‚ÄúGit GUI Here‚Äù are checked. Click Next.\nInstallation Location: Use the default location unless needed otherwise. Click Next.\nStart Menu Folder: Accept the default. Click Next.\nAdjust PATH Environment: Critical for RStudio. Select:\n\n‚ÄúGit from the command line and also from 3rd-party software‚Äù\nClick Next.\n\nDefault Branch Name: Use main for new repositories. Click Next.\nHTTPS Backend: Choose ‚ÄúUse the OpenSSL library‚Äù (recommended). Click Next.\nLine Ending Conversions: Select ‚ÄúCheckout Windows-style, commit Unix-style line endings‚Äù for cross-platform compatibility. Click Next.\nTerminal Emulator: Choose ‚ÄúUse MinTTY (default Git for Windows terminal)‚Äù. Click Next.\nDefault git pull Behavior: Select ‚ÄúDefault (fast-forward or merge)‚Äù. Click Next.\nCredential Helper: Choose ‚ÄúGit Credential Manager Core‚Äù. Click Next.\nExtra Options: Accept defaults. Click Next.\nExperimental Options: Uncheck unless needed. Click Install.\n\nFinish Installation\n\nClick Finish when complete. Uncheck ‚ÄúView Release Notes‚Äù if desired.\n\nVerify Installation in RStudio\n\nImportant: Close and reopen RStudio (or its terminal pane) to update the PATH environment variable.\nOpen a new terminal in RStudio: Tools &gt; Terminal &gt; New Terminal.\nType git --version and press Enter. You should see the Git version (e.g., git version 2.45.2.windows.1).\nIf an error occurs, restart your computer and retry git --version."
  },
  {
    "objectID": "git-installation-windows.html#rstudio-git-and-github-workflow",
    "href": "git-installation-windows.html#rstudio-git-and-github-workflow",
    "title": "Git Installation on Windows",
    "section": "RStudio, Git, and GitHub Workflow",
    "text": "RStudio, Git, and GitHub Workflow\nTo use Git and GitHub with RStudio, follow these steps:\n\nStart/Update Project: Create or update an RStudio project locally.\nEdit Code: Write or modify R code in RStudio.\nSave & Stage: Save changes and stage them with git add.\nCommit Changes: Commit staged changes with git commit.\nPush to GitHub: Push commits to a GitHub repository with git push.\nSync with GitHub: Ensure the GitHub repository reflects local changes.\nPull Changes: Pull updates from GitHub with git pull.\n\nReturn to SEction Overview | Check for Git Installation"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "git-installation-mac.html",
    "href": "git-installation-mac.html",
    "title": "Git Installation on macOS",
    "section": "",
    "text": "This guide walks you through installing Git on your macOS machine for use with RStudio and GitHub. We recommend using Homebrew for the easiest installation.\n\n\nHomebrew is a package manager for macOS that simplifies software installation.\n\nInstall Homebrew (if not already installed)\n\nOpen the Terminal application: Finder &gt; Applications &gt; Utilities &gt; Terminal.\nRun the following command:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nFollow the on-screen instructions, entering your macOS user password if prompted.\n\nInstall Git using Homebrew\n\nIn the Terminal, run:\nbrew install git\nPress Enter to download and install Git.\n\nVerify Installation in RStudio\n\nImportant: Close and reopen RStudio (or its terminal pane) to update the PATH environment variable.\nOpen a new terminal in RStudio: Tools &gt; Terminal &gt; New Terminal.\nType git --version and press Enter. You should see the Git version (e.g., git version 2.43.0).\n\n\n\n\n\n\nDownload the Installer\n\nVisit the official Git website: https://git-scm.com/downloads.\nClick the ‚ÄúmacOS‚Äù link and download the latest .dmg installer.\n\nRun the Installer\n\nLocate the downloaded .dmg file and double-click it.\nDouble-click the .pkg file in the opened window to start the installer.\n\nFollow the Installation Wizard Prompts\n\nClick Continue through the steps.\nEnter your macOS administrator password when prompted.\n\nVerify Installation in RStudio\n\nImportant: Close and reopen RStudio (or its terminal pane) to update the PATH environment variable.\nOpen a new terminal in RStudio: Tools &gt; Terminal &gt; New Terminal.\nType git --version and press Enter. You should see the Git version (e.g., git version 2.43.0)."
  },
  {
    "objectID": "git-installation-mac.html#installing-git-on-macos",
    "href": "git-installation-mac.html#installing-git-on-macos",
    "title": "Git Installation on macOS",
    "section": "",
    "text": "This guide walks you through installing Git on your macOS machine for use with RStudio and GitHub. We recommend using Homebrew for the easiest installation.\n\n\nHomebrew is a package manager for macOS that simplifies software installation.\n\nInstall Homebrew (if not already installed)\n\nOpen the Terminal application: Finder &gt; Applications &gt; Utilities &gt; Terminal.\nRun the following command:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nFollow the on-screen instructions, entering your macOS user password if prompted.\n\nInstall Git using Homebrew\n\nIn the Terminal, run:\nbrew install git\nPress Enter to download and install Git.\n\nVerify Installation in RStudio\n\nImportant: Close and reopen RStudio (or its terminal pane) to update the PATH environment variable.\nOpen a new terminal in RStudio: Tools &gt; Terminal &gt; New Terminal.\nType git --version and press Enter. You should see the Git version (e.g., git version 2.43.0).\n\n\n\n\n\n\nDownload the Installer\n\nVisit the official Git website: https://git-scm.com/downloads.\nClick the ‚ÄúmacOS‚Äù link and download the latest .dmg installer.\n\nRun the Installer\n\nLocate the downloaded .dmg file and double-click it.\nDouble-click the .pkg file in the opened window to start the installer.\n\nFollow the Installation Wizard Prompts\n\nClick Continue through the steps.\nEnter your macOS administrator password when prompted.\n\nVerify Installation in RStudio\n\nImportant: Close and reopen RStudio (or its terminal pane) to update the PATH environment variable.\nOpen a new terminal in RStudio: Tools &gt; Terminal &gt; New Terminal.\nType git --version and press Enter. You should see the Git version (e.g., git version 2.43.0)."
  },
  {
    "objectID": "git-installation-mac.html#rstudio-git-and-github-workflow",
    "href": "git-installation-mac.html#rstudio-git-and-github-workflow",
    "title": "Git Installation on macOS",
    "section": "RStudio, Git, and GitHub Workflow",
    "text": "RStudio, Git, and GitHub Workflow\nTo use Git and GitHub with RStudio, follow these steps:\n\nStart/Update Project: Create or update an RStudio project locally.\nEdit Code: Write or modify R code in RStudio.\nSave & Stage: Save changes and stage them with git add.\nCommit Changes: Commit staged changes with git commit.\nPush to GitHub: Push commits to a GitHub repository with git push.\nSync with GitHub: Ensure the GitHub repository reflects local changes.\nPull Changes: Pull updates from GitHub with git pull.\n\nReturn to Section Overview | Check for Git Installation"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to an Open Research LJMU Workshop!",
    "section": "",
    "text": "Welcome to What is Git/Github, and how do I use it with R?! To ensure a smooth experience during our session, after the Waht is Git information section, please have a look at the following instructions, starting with a check whether Git is already installed on your computer.\nMinimum Requirement: All participants should have RStudio installed. If you don‚Äôt have RStudio, please install it first from posit.co/download/rstudio-desktop/.\n\n1. What is Git/Github and why to use it as a researcher\nWhat are Git, Github? What‚Äôs the workflow? Why would it benefit researchers and supervisors who aren‚Äôt software developers or data analysts?\n\n\n2. Minimal setup with Github Desktop\nMinimal local version control, using the local app ‚ÄòGithub Desktop‚Äô. No direct integration with RStudio.\n\n\n3. Standard setup with integration of RStudio and Github\nFull setup, including version control with Git and seamless integration with GitHub for collaborative projects and advanced data science workflows. This is ideal if you plan to continue using a combination of RStudio and Git beyond this workshop.\n\n\n4. More involved setups\nWhere to look if you want robust and highly reproducible solutions that also work with Git version control to some extent: Nix vs.¬†Docker. I haven‚Äôt tested Nix yet, but it‚Äôs similar to Anaconda that was used by a previous presenter in this workshop. Docker is good but not the best for day-to-day smooth workflow due to large file sizes and time needed to build docker images.\nQuestions or Issues? If you encounter any problems during setup, please don‚Äôt hesitate to reach out! eMail: f.zajitschek@ljmu.ac.uk Bluesky: @zajitschek.bsky.social X: @zajitschek"
  },
  {
    "objectID": "verify-git.html",
    "href": "verify-git.html",
    "title": "How to Check for Git Installation",
    "section": "",
    "text": "It‚Äôs easy to check if Git is already installed on your computer.\n\nOpen the Terminal in RStudio:\n\nIn RStudio, go to Tools &gt; Terminal &gt; New Terminal. This will open a command-line interface directly within RStudio.\n\nType the command and press Enter:\ngit --version\nInterpret the output:\n\nIf Git IS installed: You will see a message like this, indicating the version number:\ngit version 2.45.2.windows.1 # (Version number will vary)\nIf you see this, great! You have Git. You can continue with the next steps.\nIf Git is NOT installed: You will see an error message, which varies slightly by operating system:\n\nOn Windows:\n'git' is not recognized as an internal or external command,\noperable program or batch file.\nor ``` The term ‚Äògit‚Äô is not recognized as the name of a cmdlet, function, script file, or operable program.\n```\nOn macOS / Linux: bash: git: command not found or zsh: command not found: git If you see any of these error messages, Git is not installed or not correctly configured in your system‚Äôs PATH. Please proceed to the installation steps below for your operating system.\n\n\n\n\nNeed to Install Git?\n\nFor Windows (PC): Follow these detailed instructions: Git Installation on Windows\nFor macOS: Follow these detailed instructions: Git Installation on macOS"
  },
  {
    "objectID": "setup-future.html",
    "href": "setup-future.html",
    "title": "Reproducible Environments: Nix vs.¬†Docker",
    "section": "",
    "text": "Nix is a powerful tool for managing software environments in a way that is fully reproducible. It works by describing your entire environment‚Äîincluding the exact versions of R and all your R packages‚Äîin a single file. This file can then be used by anyone to get the exact same setup.\n\n\n\nDefine Your Environment: In the root of your R project, create a file named shell.nix. Inside this file, you‚Äôll specify all your dependencies using the Nix language. This is where you declare the specific version of R, RStudio, and any required packages. nix     let       nixpkgs = fetchTarball \"[https://github.com/NixOS/nixpkgs/archive/nixos-23.11.tar.gz](https://github.com/NixOS/nixpkgs/archive/nixos-23.11.tar.gz)\";       pkgs = import nixpkgs { };     in     pkgs.mkShell {       buildInputs = [         pkgs.r-base         pkgs.r-jsonlite         pkgs.r-ggplot2         # ... add all other R packages here       ];     }\nEnter the Environment: From your terminal, run the command nix-shell. Nix will automatically download and set up all the specified dependencies without interfering with the rest of your system. Once the process is complete, you are ‚Äúinside‚Äù the isolated environment.\nLaunch RStudio: With the Nix environment active, you can launch RStudio. It will automatically detect and use the specific versions of R and packages that you‚Äôve defined in your shell.nix file.\nVersion Control with Git and GitHub:\n\nYour shell.nix file is just a text file. You commit it to Git and push it to your GitHub repository along with your R code.\nA collaborator simply clones your repository and runs nix-shell. Nix handles all the dependency management, so they don‚Äôt have to worry about manually installing anything.\n\n\n\n\n\n\nPros:\n\nReproducibility: Guarantees the same environment every time.\nIsolation: Packages and dependencies are kept separate from your system, avoiding conflicts.\nFine-grained control: You can pin dependencies to specific versions, even across different operating systems.\nPerformance: Nix runs directly on your machine without the overhead of containerization.\n\nCons:\n\nLearning Curve: The Nix language and ecosystem can be complex for new users.\nInitial Setup: Installing Nix and setting up your first environment can take time.\nAll-or-Nothing: All collaborators must use Nix to get the benefits."
  },
  {
    "objectID": "setup-future.html#nix-the-reproducible-package-manager",
    "href": "setup-future.html#nix-the-reproducible-package-manager",
    "title": "Reproducible Environments: Nix vs.¬†Docker",
    "section": "",
    "text": "Nix is a powerful tool for managing software environments in a way that is fully reproducible. It works by describing your entire environment‚Äîincluding the exact versions of R and all your R packages‚Äîin a single file. This file can then be used by anyone to get the exact same setup.\n\n\n\nDefine Your Environment: In the root of your R project, create a file named shell.nix. Inside this file, you‚Äôll specify all your dependencies using the Nix language. This is where you declare the specific version of R, RStudio, and any required packages. nix     let       nixpkgs = fetchTarball \"[https://github.com/NixOS/nixpkgs/archive/nixos-23.11.tar.gz](https://github.com/NixOS/nixpkgs/archive/nixos-23.11.tar.gz)\";       pkgs = import nixpkgs { };     in     pkgs.mkShell {       buildInputs = [         pkgs.r-base         pkgs.r-jsonlite         pkgs.r-ggplot2         # ... add all other R packages here       ];     }\nEnter the Environment: From your terminal, run the command nix-shell. Nix will automatically download and set up all the specified dependencies without interfering with the rest of your system. Once the process is complete, you are ‚Äúinside‚Äù the isolated environment.\nLaunch RStudio: With the Nix environment active, you can launch RStudio. It will automatically detect and use the specific versions of R and packages that you‚Äôve defined in your shell.nix file.\nVersion Control with Git and GitHub:\n\nYour shell.nix file is just a text file. You commit it to Git and push it to your GitHub repository along with your R code.\nA collaborator simply clones your repository and runs nix-shell. Nix handles all the dependency management, so they don‚Äôt have to worry about manually installing anything.\n\n\n\n\n\n\nPros:\n\nReproducibility: Guarantees the same environment every time.\nIsolation: Packages and dependencies are kept separate from your system, avoiding conflicts.\nFine-grained control: You can pin dependencies to specific versions, even across different operating systems.\nPerformance: Nix runs directly on your machine without the overhead of containerization.\n\nCons:\n\nLearning Curve: The Nix language and ecosystem can be complex for new users.\nInitial Setup: Installing Nix and setting up your first environment can take time.\nAll-or-Nothing: All collaborators must use Nix to get the benefits."
  },
  {
    "objectID": "setup-future.html#docker-the-containerization-solution",
    "href": "setup-future.html#docker-the-containerization-solution",
    "title": "Reproducible Environments: Nix vs.¬†Docker",
    "section": "Docker: The Containerization Solution",
    "text": "Docker: The Containerization Solution\nDocker is a platform that uses containers to package an application and its dependencies into a single, isolated unit. Think of it as a lightweight virtual machine that contains everything your project needs to run, from the operating system to the R packages.\n\nThe Docker Workflow with RStudio and GitHub\n\nDefine Your Container: In the root of your R project, you create a text file named Dockerfile. This file contains instructions for building your container image. You‚Äôll start with a base image (like a rocker/rstudio image), and then specify which R packages to install.\nFROM rocker/rstudio:4.3.0\n\n# Install R packages\nRUN R -e \"install.packages('ggplot2', repos='[https://cloud.r-project.org/](https://cloud.r-project.org/)')\"\nRUN R -e \"install.packages('jsonlite', repos='[https://cloud.r-project.org/](https://cloud.r-project.org/)')\"\n\n# Set the working directory\nWORKDIR /home/rstudio\nBuild the Image: From your terminal, run the command docker build -t my-r-project .. This command reads the Dockerfile and builds a new Docker image containing all your dependencies.\nRun the Container: Once the image is built, you can run a container from it and map your project folder to it. bash     docker run --rm -p 8787:8787 -v C:/path/to/my/project:/home/rstudio my-r-project This command starts the container and makes RStudio accessible in your web browser at localhost:8787. The -v flag ensures that your local project files are accessible inside the container.\nVersion Control with Git and GitHub:\n\nYou commit the Dockerfile to your Git repository and push it to GitHub alongside your R code.\nA collaborator clones the repository. They only need to run the docker build and docker run commands to get a fully working, isolated environment that is identical to yours.\n\n\n\n\nPros and Cons of using Docker\n\nPros:\n\nPortability: Docker containers can run on any machine with Docker installed (Windows, macOS, or Linux).\nStrong Isolation: The container is a fully isolated environment, which is great for security and avoiding conflicts.\nIndustry Standard: Docker is widely used, and there is a huge community and ecosystem of pre-built images.\nEnvironment Encapsulation: The entire environment, from the operating system up, is encapsulated in the image.\n\nCons:\n\nPerformance Overhead: The containerization layer can add some overhead, especially for computationally intensive tasks.\nResource Intensive: Docker can be more resource-heavy than Nix, as it requires a background daemon and can consume more disk space.\nDebugging: It can be slightly more challenging to debug code inside a container than it is in a local environment."
  }
]